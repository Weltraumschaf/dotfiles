# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "${PS1}" ] && return

if [ -f "${HOME}/.bash_functions" ]; then
  . "${HOME}/.bash_functions"
fi

# dont nerv me!
set bell-style none

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# Save history immediatly after running command
# With "history -n" it's possible to read all new lines since last read
PROMPT_COMMAND="history -a"

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

if [ -f "${HOME}/.bash_exports" ] ; then
  source "${HOME}/.bash_exports"
fi

if [ -f "${HOME}/.config/golang" ] ; then
  source "${HOME}/.config/golang"
fi

if [ -f "$HOME/.config/perl" ] ; then
  source "$HOME/.config/perl"
fi

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	    # We have color support; assume it's compliant with Ecma-48
	    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	    # a case would tend to support setf rather than setaf.)
	    color_prompt=yes
    else
	    color_prompt=
    fi
fi

if [ -f "${HOME}/.git-prompt" ] ; then
    GIT_PS1_SHOWCOLORHINTS="true"
    GIT_PS1_SHOWDIRTYSTATE="true"
    GIT_PS1_SHOWSTASHSTATE="true"
    GIT_PS1_SHOWUNTRACKEDFILES="true"
    GIT_PS1_SHOWUPSTREAM="auto"
    source "${HOME}/.git-prompt"
else
    __git_ps1=""
fi

if [ "${color_prompt}" = yes ] ; then
	PS1='\u@\h \w \[\033[90m\]$(__git_ps1)\[\033[37m\]$\[\033[00m\] '
else
	PS1='\u@\h \w $(__git_ps1) '
fi

export PS1

unset color_prompt force_color_prompt

if [ -f "${HOME}/.bash_aliases" ] ; then
  source "${HOME}/.bash_aliases"
fi

if [ -f "${HOME}/.ssh_aliases" ] ; then
 	source "${HOME}/.ssh_aliases"
fi

if [ -f "${HOME}/.local_aliases" ] ; then
  source "${HOME}/.local_aliases"
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f "/etc/bash_completion" ] && ! shopt -oq posix ; then
  source "/etc/bash_completion"
fi

if [ -f "${HOME}/.config/git-completion.bash" ] ; then
  source "${HOME}/.config/git-completion.bash"
fi

# for `ls` (GNU coreutils, homebrew)
# port install coreutils +with_default_names
if [ "$TERM" != "dumb" ] ; then
  # FIXIT: Which is the right name and determine BSD/MACOS or LINUX
  #export LSCOLORS=gxfxcxdxbxegedabagacad
  #export LS_COLORS='no=00:fi=00:di=01;35:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.flac=01;35:*.mp3=01;35:*.mpc=01;35:*.ogg=01;35:*.wav=01;35:';
  export GREP_OPTIONS='--color=auto'

  #if which dircolors >/dev/null; then
    # core utils installed
    #export LS_OPTIONS='--color=auto --file-type'
    #eval `dircolors "$HOME/.dir_colors"`
  #fi
fi

# Set CONCURRENCY_LEVEL to number of CPUs
if [ -f /proc/cpuinfo ]; then
  # linux style
  CONCURRENCY_LEVEL=`grep -c processor /proc/cpuinfo`
elif [ -x "`which system_profiler`" ]; then
  # mac os style
  CONCURRENCY_LEVEL=`system_profiler SPHardwareDataType | grep --color=never "Total Number Of Cores" | sed 's/[^0-9]*//g'`
else
  CONCURRENCY_LEVEL=1
fi

export CONCURRENCY_LEVEL

# Source additional information, which applies to the current host only
if [ -f "${HOME}/.bash_local" ]; then
	source "${HOME}/.bash_local"
fi

# In case, we've changed the directory, switch back to home dir
cd

#if [ "$SHLVL" -lt 2 ]; then
#	echo "Hit Ctrl+C to not raise screen now!"
#	sleep 1
#	screen -D -r
#else
if [ "$SHLVL" -gt 4 ]; then
	function ssh() {
		hname=${1##*@}
		echo -n -e "\033k$hname\033\\"
		$(which ssh) $@
		echo -n -e "\033k`hostname`\033\\"
	}

	function telnet() {
		echo -n -e "\033k$1\033\\"
		$(which telnet) $@
		echo -n -e "\033k`hostname`\033\\"
	}

  echo -n -e "\033k`hostname`\033\\"
fi

export _PATH=$PATH # Workaround for screen on mac os

if ommand -v brew >/dev/null 2>&1; then
    if [ -f `brew --prefix`/Library/Contributions/brew_bash_completion.sh ]; then
      source `brew --prefix`/Library/Contributions/brew_bash_completion.sh
    fi
fi

#THIS MUST BE AT THE END OF THE FILE FOR GVM TO WORK!!!
[[ -s "${HOME}/.gvm/bin/gvm-init.sh" && -z $(which gvm-init.sh | grep '/gvm-init.sh') ]] && source "${HOME}/.gvm/bin/gvm-init.sh"
