# shellcheck disable=SC2148

#
# ~/.bashrc: executed by bash(1) for non-login shells.
#
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples.
#

#
# Debug slow startup time
#
# https://mdjnewman.me/2017/10/debugging-slow-bash-startup-files/
#
# `ts` is in `brew install moreutils`
#
# open file descriptor 5 such that anything written to /dev/fd/5
# is piped through ts and then to /tmp/timestamps
# BASH_TRACING_LOG="${HOME}/tmp/bash_tracing.log"
# exec 5> >(ts -i "%.s" >> "${BASH_TRACING_LOG}")
# https://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html
# export BASH_XTRACEFD="5"
# Enable tracing
# set -x

# If not running interactively, don't do anything.
[ -z "${PS1}" ] && return

if [ -f "${HOME}/.bash_functions" ]; then
    # shellcheck disable=SC1090
    source "${HOME}/.bash_functions"
fi

# Don't nerv me!
set bell-style none

# Append to the history file, don't overwrite it.
shopt -s histappend
# Save history immediatly after running command.
# With "history -n" it's possible to read all new lines since last read.
PROMPT_COMMAND="history -a"

# Check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# http://www.softec.lu/site/DevelopersCorner/MasteringThePathHelper`
# shellcheck disable=SC1090
[[ -s "/usr/libexec/path_helper" ]] && eval "$(/usr/libexec/path_helper -s)"

if [ -f "${HOME}/.bash_exports" ] ; then
    # shellcheck disable=SC1090
    source "${HOME}/.bash_exports"
fi

if [ -f "$HOME/.config/perl" ] ; then
    # shellcheck disable=SC1090
    source "$HOME/.config/perl"
fi

# Uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt.
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        # shellcheck disable=SC2034
        color_prompt=
    fi
fi

if [ -f "${HOME}/.git_prompt" ] ; then
    # shellcheck disable=SC2034
    GIT_PS1_SHOWCOLORHINTS="true"
    # shellcheck disable=SC2034
    GIT_PS1_SHOWDIRTYSTATE="true"
    # shellcheck disable=SC2034
    GIT_PS1_SHOWSTASHSTATE="true"
    # shellcheck disable=SC2034
    GIT_PS1_SHOWUNTRACKEDFILES="true"
    # shellcheck disable=SC2034
    GIT_PS1_SHOWUPSTREAM="auto"
    # shellcheck disable=SC1090
    source "${HOME}/.git_prompt"
else
    # shellcheck disable=SC2034
    __git_ps1=""
fi

if [ "${color_prompt}" = yes ] ; then
    PS1='\u@\h \w \[\033[90m\]$(__git_ps1)\[\033[37m\]$\[\033[00m\] '
else
    PS1='\u@\h \w $(__git_ps1) '
fi

export PS1

unset color_prompt force_color_prompt

if [ -f "${HOME}/.bash_aliases" ] ; then
    # shellcheck disable=SC1090
    source "${HOME}/.bash_aliases"
fi

if [ -f "${HOME}/.ssh_aliases" ] ; then
    # shellcheck disable=SC1090
    source "${HOME}/.ssh_aliases"
fi

if [ -f "${HOME}/.local_aliases" ] ; then
    # shellcheck disable=SC1090
    source "${HOME}/.local_aliases"
fi

# Enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f "/etc/bash_completion" ] && ! shopt -oq posix ; then
    # shellcheck disable=SC1091
    source "/etc/bash_completion"
elif [ -f "/usr/local/etc/bash_completion" ]; then
    # shellcheck disable=SC1091
    source "/usr/local/etc/bash_completion"
fi

if [ -x "/usr/local/bin/brew" ]; then
    if [ -f "$(brew --prefix)/etc/brew-wrap" ] ; then
        # shellcheck disable=SC1090
        source "$(brew --prefix)/etc/brew-wrap"
    fi

    RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
    export RUBY_CONFIGURE_OPTS
fi

# Source additional information, which applies to the current host only.
if [ -f "${HOME}/.bash_local" ]; then
    # shellcheck disable=SC1090
    source "${HOME}/.bash_local"
fi

[[ "$(command -v direnv)" ]] && eval "$(direnv hook bash)"

# shellcheck disable=SC1090
[[ "$(command -v hcloud)" ]] && source <(hcloud completion bash)

# shellcheck disable=SC1090
[[ -s "${HOME}/perl5/perlbrew/etc/bashrc" ]] && source "${HOME}/perl5/perlbrew/etc/bashrc"

# shellcheck disable=SC1090
[[ -s "${HOME}/.cargo/env" ]] && source "${HOME}/.cargo/env"

# shellcheck disable=SC1090
[[ "$(command -v kubectl)" ]] && source <(kubectl completion bash)

# shellcheck disable=SC1090
[[ "$(command -v eksctl)" ]] && source <(eksctl completion bash)

# https://sdkman.io
# shellcheck disable=SC1090
[[ -s "${HOME}/.sdkman/bin/sdkman-init.sh" ]] && source "${HOME}/.sdkman/bin/sdkman-init.sh"

# https://stackoverflow.com/questions/39381360/how-do-i-install-ruby-gems-on-mac/43293653#43293653
[[ "$(command -v rbenv)" ]] && eval "$(rbenv init -)"

[[ -f ~/.fzf.bash ]] && source "${HOME}/.fzf.bash"

BROOT="${HOME}/Library/Preferences/org.dystroy.broot/launcher/bash/br"
[[ -f "${BROOT}" ]] && source "${BROOT}"

export NVM_DIR="${HOME}/.nvm"
# This loads nvm:
[ -s "/usr/local/opt/nvm/nvm.sh" ] && source "/usr/local/opt/nvm/nvm.sh"
# This loads nvm bash_completion:
[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && source "/usr/local/opt/nvm/etc/bash_completion.d/nvm"
