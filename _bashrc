# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# enable 256 colors in terminal (useful for vim colorschemes)
if [ -e /usr/share/terminfo/x/xterm-256color ]; then
	export TERM='xterm-256color'
else
	export TERM='xterm-color'
fi

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# Set HISTSIZE and HISTFILESIZE to an empty value as we append and love our history :)
# unset isn't working. It will be reset to 500 everytime!
export HISTSIZE=
export HISTFILESIZE=

# Save history immediatly after running command
# With "history -n" it's possible to read all new lines since last read
PROMPT_COMMAND="history -a"

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	    # We have color support; assume it's compliant with Ecma-48
	    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	    # a case would tend to support setf rather than setaf.)
	    color_prompt=yes
    else
	    color_prompt=
    fi
fi

parse_git_branch() {
  git name-rev HEAD 2> /dev/null | sed "s#HEAD\ \(.*\)#(\1)\ #"
}

if [ "$color_prompt" = yes ]; then
  PS1='\u@\h \w \[\033[90m\]$(parse_git_branch)\[\033[37m\]$\[\033[00m\] '
  PS1='\u@\h \w $(parse_git_branch) '
else
	PS1='\u@\h \w $(parse_git_branch) '
fi
export PS1

unset color_prompt force_color_prompt

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f "$HOME/.bash_aliases" ] ; then
  . "$HOME/.bash_aliases"
fi

if [ -f "$HOME/.ssh_aliases" ] ; then
    source "$HOME/.ssh_aliases"
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix ; then
  . /etc/bash_completion
fi

if [ -f "$HOME/.config/git_completion" ] ; then
  . "$HOME/.config/git_completion"
fi

# Set to UTF-8 and english locale
export LANG="en_US.UTF-8"

# Set to 'C' to make ls sort dotfiles
export LC_COLLATE=C
export CLICOLOR=1
export LSCOLORS=gxfxcxdxbxegedabagacad

export GREP_OPTIONS='--color=always'

# for `ls` (GNU coreutils, homebrew)
# port install coreutils +with_default_names
if [ "$TERM" != "dumb" ]; then
	export LS_OPTIONS='--color=auto --file-type'
	eval `dircolors $HOME/.dir_colors`
fi

# Set the right editor
export EDITOR=/usr/bin/nano

# Set CONCURRENCY_LEVEL to number of CPUs
if [ -f /proc/cpuinfo ]; then
  # linux style
  CONCURRENCY_LEVEL=`grep -c processor /proc/cpuinfo`
elif [ -x "`which system_profiler`" ]; then
  # mac os style
  CONCURRENCY_LEVEL=`system_profiler SPHardwareDataType | grep --color=never "Total Number Of Cores" | sed 's/[^0-9]*//g'`
else
  CONCURRENCY_LEVEL=1
fi
export CONCURRENCY_LEVEL

# Source additional information, which applies to the current host only
if [ -f ~/.bash_local ]; then
	. ~/.bash_local
fi

# Export some debian stuff
DEBEMAIL=$DEBEMAIL_local
DEBFULLNAME=$DEBFULLNAME_local
export DEBEMAIL DEBFULLNAME

# In case, we've changed the directory, switch back to home dir
cd

#if [ "$SHLVL" -lt 2 ]; then
#	echo "Hit Ctrl+C to not raise screen now!"
#	sleep 1
#	screen -D -r
#else
if [ "$SHLVL" -gt 4 ]; then
	function ssh() {
		hname=${1##*@}
		echo -n -e "\033k$hname\033\\"
		$(which ssh) $@
		echo -n -e "\033k`hostname`\033\\"
	}
	function telnet() {
		echo -n -e "\033k$1\033\\"
		$(which telnet) $@
		echo -n -e "\033k`hostname`\033\\"
	}
	echo -n -e "\033k`hostname`\033\\"
fi

export _PATH=$PATH # Workaround for screen on mac os
